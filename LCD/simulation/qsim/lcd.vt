// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2024 15:20:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lcd_vlg_sample_tst(
	clk,
	rst_n,
	sampler_tx
);
input  clk;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lcd_vlg_check_tst (
	char1,
	char2,
	char3,
	char4,
	char5,
	char6,
	lcd_data,
	lcd_en,
	lcd_rs,
	lcd_rw,
	sampler_rx
);
input [7:0] char1;
input [7:0] char2;
input [7:0] char3;
input [7:0] char4;
input [7:0] char5;
input [7:0] char6;
input [7:0] lcd_data;
input  lcd_en;
input  lcd_rs;
input  lcd_rw;
input sampler_rx;

reg [7:0] char1_expected;
reg [7:0] char2_expected;
reg [7:0] char3_expected;
reg [7:0] char4_expected;
reg [7:0] char5_expected;
reg [7:0] char6_expected;
reg [7:0] lcd_data_expected;
reg  lcd_en_expected;
reg  lcd_rs_expected;
reg  lcd_rw_expected;

reg [7:0] char1_prev;
reg [7:0] char2_prev;
reg [7:0] char3_prev;
reg [7:0] char4_prev;
reg [7:0] char5_prev;
reg [7:0] char6_prev;
reg [7:0] lcd_data_prev;
reg  lcd_en_prev;
reg  lcd_rs_prev;
reg  lcd_rw_prev;

reg [7:0] char1_expected_prev;
reg [7:0] char2_expected_prev;
reg [7:0] char3_expected_prev;
reg [7:0] char4_expected_prev;
reg [7:0] char5_expected_prev;
reg [7:0] char6_expected_prev;
reg [7:0] lcd_data_expected_prev;
reg  lcd_en_expected_prev;
reg  lcd_rs_expected_prev;
reg  lcd_rw_expected_prev;

reg [7:0] last_char1_exp;
reg [7:0] last_char2_exp;
reg [7:0] last_char3_exp;
reg [7:0] last_char4_exp;
reg [7:0] last_char5_exp;
reg [7:0] last_char6_exp;
reg [7:0] last_lcd_data_exp;
reg  last_lcd_en_exp;
reg  last_lcd_rs_exp;
reg  last_lcd_rw_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	char1_prev = char1;
	char2_prev = char2;
	char3_prev = char3;
	char4_prev = char4;
	char5_prev = char5;
	char6_prev = char6;
	lcd_data_prev = lcd_data;
	lcd_en_prev = lcd_en;
	lcd_rs_prev = lcd_rs;
	lcd_rw_prev = lcd_rw;
end

// update expected /o prevs

always @(trigger)
begin
	char1_expected_prev = char1_expected;
	char2_expected_prev = char2_expected;
	char3_expected_prev = char3_expected;
	char4_expected_prev = char4_expected;
	char5_expected_prev = char5_expected;
	char6_expected_prev = char6_expected;
	lcd_data_expected_prev = lcd_data_expected;
	lcd_en_expected_prev = lcd_en_expected;
	lcd_rs_expected_prev = lcd_rs_expected;
	lcd_rw_expected_prev = lcd_rw_expected;
end



// expected lcd_en
initial
begin
	lcd_en_expected = 1'bX;
end 

// expected lcd_rs
initial
begin
	lcd_rs_expected = 1'bX;
end 

// expected lcd_rw
initial
begin
	lcd_rw_expected = 1'bX;
end 
// expected lcd_data[ 7 ]
initial
begin
	lcd_data_expected[7] = 1'bX;
end 
// expected lcd_data[ 6 ]
initial
begin
	lcd_data_expected[6] = 1'bX;
end 
// expected lcd_data[ 5 ]
initial
begin
	lcd_data_expected[5] = 1'bX;
end 
// expected lcd_data[ 4 ]
initial
begin
	lcd_data_expected[4] = 1'bX;
end 
// expected lcd_data[ 3 ]
initial
begin
	lcd_data_expected[3] = 1'bX;
end 
// expected lcd_data[ 2 ]
initial
begin
	lcd_data_expected[2] = 1'bX;
end 
// expected lcd_data[ 1 ]
initial
begin
	lcd_data_expected[1] = 1'bX;
end 
// expected lcd_data[ 0 ]
initial
begin
	lcd_data_expected[0] = 1'bX;
end 
// expected char1[ 7 ]
initial
begin
	char1_expected[7] = 1'bX;
end 
// expected char1[ 6 ]
initial
begin
	char1_expected[6] = 1'bX;
end 
// expected char1[ 5 ]
initial
begin
	char1_expected[5] = 1'bX;
end 
// expected char1[ 4 ]
initial
begin
	char1_expected[4] = 1'bX;
end 
// expected char1[ 3 ]
initial
begin
	char1_expected[3] = 1'bX;
end 
// expected char1[ 2 ]
initial
begin
	char1_expected[2] = 1'bX;
end 
// expected char1[ 1 ]
initial
begin
	char1_expected[1] = 1'bX;
end 
// expected char1[ 0 ]
initial
begin
	char1_expected[0] = 1'bX;
end 
// expected char2[ 7 ]
initial
begin
	char2_expected[7] = 1'bX;
end 
// expected char2[ 6 ]
initial
begin
	char2_expected[6] = 1'bX;
end 
// expected char2[ 5 ]
initial
begin
	char2_expected[5] = 1'bX;
end 
// expected char2[ 4 ]
initial
begin
	char2_expected[4] = 1'bX;
end 
// expected char2[ 3 ]
initial
begin
	char2_expected[3] = 1'bX;
end 
// expected char2[ 2 ]
initial
begin
	char2_expected[2] = 1'bX;
end 
// expected char2[ 1 ]
initial
begin
	char2_expected[1] = 1'bX;
end 
// expected char2[ 0 ]
initial
begin
	char2_expected[0] = 1'bX;
end 
// expected char3[ 7 ]
initial
begin
	char3_expected[7] = 1'bX;
end 
// expected char3[ 6 ]
initial
begin
	char3_expected[6] = 1'bX;
end 
// expected char3[ 5 ]
initial
begin
	char3_expected[5] = 1'bX;
end 
// expected char3[ 4 ]
initial
begin
	char3_expected[4] = 1'bX;
end 
// expected char3[ 3 ]
initial
begin
	char3_expected[3] = 1'bX;
end 
// expected char3[ 2 ]
initial
begin
	char3_expected[2] = 1'bX;
end 
// expected char3[ 1 ]
initial
begin
	char3_expected[1] = 1'bX;
end 
// expected char3[ 0 ]
initial
begin
	char3_expected[0] = 1'bX;
end 
// expected char4[ 7 ]
initial
begin
	char4_expected[7] = 1'bX;
end 
// expected char4[ 6 ]
initial
begin
	char4_expected[6] = 1'bX;
end 
// expected char4[ 5 ]
initial
begin
	char4_expected[5] = 1'bX;
end 
// expected char4[ 4 ]
initial
begin
	char4_expected[4] = 1'bX;
end 
// expected char4[ 3 ]
initial
begin
	char4_expected[3] = 1'bX;
end 
// expected char4[ 2 ]
initial
begin
	char4_expected[2] = 1'bX;
end 
// expected char4[ 1 ]
initial
begin
	char4_expected[1] = 1'bX;
end 
// expected char4[ 0 ]
initial
begin
	char4_expected[0] = 1'bX;
end 
// expected char5[ 7 ]
initial
begin
	char5_expected[7] = 1'bX;
end 
// expected char5[ 6 ]
initial
begin
	char5_expected[6] = 1'bX;
end 
// expected char5[ 5 ]
initial
begin
	char5_expected[5] = 1'bX;
end 
// expected char5[ 4 ]
initial
begin
	char5_expected[4] = 1'bX;
end 
// expected char5[ 3 ]
initial
begin
	char5_expected[3] = 1'bX;
end 
// expected char5[ 2 ]
initial
begin
	char5_expected[2] = 1'bX;
end 
// expected char5[ 1 ]
initial
begin
	char5_expected[1] = 1'bX;
end 
// expected char5[ 0 ]
initial
begin
	char5_expected[0] = 1'bX;
end 
// expected char6[ 7 ]
initial
begin
	char6_expected[7] = 1'bX;
end 
// expected char6[ 6 ]
initial
begin
	char6_expected[6] = 1'bX;
end 
// expected char6[ 5 ]
initial
begin
	char6_expected[5] = 1'bX;
end 
// expected char6[ 4 ]
initial
begin
	char6_expected[4] = 1'bX;
end 
// expected char6[ 3 ]
initial
begin
	char6_expected[3] = 1'bX;
end 
// expected char6[ 2 ]
initial
begin
	char6_expected[2] = 1'bX;
end 
// expected char6[ 1 ]
initial
begin
	char6_expected[1] = 1'bX;
end 
// expected char6[ 0 ]
initial
begin
	char6_expected[0] = 1'bX;
end 
// generate trigger
always @(char1_expected or char1 or char2_expected or char2 or char3_expected or char3 or char4_expected or char4 or char5_expected or char5 or char6_expected or char6 or lcd_data_expected or lcd_data or lcd_en_expected or lcd_en or lcd_rs_expected or lcd_rs or lcd_rw_expected or lcd_rw)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected char1 = %b | expected char2 = %b | expected char3 = %b | expected char4 = %b | expected char5 = %b | expected char6 = %b | expected lcd_data = %b | expected lcd_en = %b | expected lcd_rs = %b | expected lcd_rw = %b | ",char1_expected_prev,char2_expected_prev,char3_expected_prev,char4_expected_prev,char5_expected_prev,char6_expected_prev,lcd_data_expected_prev,lcd_en_expected_prev,lcd_rs_expected_prev,lcd_rw_expected_prev);
	$display("| real char1 = %b | real char2 = %b | real char3 = %b | real char4 = %b | real char5 = %b | real char6 = %b | real lcd_data = %b | real lcd_en = %b | real lcd_rs = %b | real lcd_rw = %b | ",char1_prev,char2_prev,char3_prev,char4_prev,char5_prev,char6_prev,lcd_data_prev,lcd_en_prev,lcd_rs_prev,lcd_rw_prev);
`endif
	if (
		( char1_expected_prev[0] !== 1'bx ) && ( char1_prev[0] !== char1_expected_prev[0] )
		&& ((char1_expected_prev[0] !== last_char1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[0] = char1_expected_prev[0];
	end
	if (
		( char1_expected_prev[1] !== 1'bx ) && ( char1_prev[1] !== char1_expected_prev[1] )
		&& ((char1_expected_prev[1] !== last_char1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[1] = char1_expected_prev[1];
	end
	if (
		( char1_expected_prev[2] !== 1'bx ) && ( char1_prev[2] !== char1_expected_prev[2] )
		&& ((char1_expected_prev[2] !== last_char1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[2] = char1_expected_prev[2];
	end
	if (
		( char1_expected_prev[3] !== 1'bx ) && ( char1_prev[3] !== char1_expected_prev[3] )
		&& ((char1_expected_prev[3] !== last_char1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[3] = char1_expected_prev[3];
	end
	if (
		( char1_expected_prev[4] !== 1'bx ) && ( char1_prev[4] !== char1_expected_prev[4] )
		&& ((char1_expected_prev[4] !== last_char1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[4] = char1_expected_prev[4];
	end
	if (
		( char1_expected_prev[5] !== 1'bx ) && ( char1_prev[5] !== char1_expected_prev[5] )
		&& ((char1_expected_prev[5] !== last_char1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[5] = char1_expected_prev[5];
	end
	if (
		( char1_expected_prev[6] !== 1'bx ) && ( char1_prev[6] !== char1_expected_prev[6] )
		&& ((char1_expected_prev[6] !== last_char1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[6] = char1_expected_prev[6];
	end
	if (
		( char1_expected_prev[7] !== 1'bx ) && ( char1_prev[7] !== char1_expected_prev[7] )
		&& ((char1_expected_prev[7] !== last_char1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char1_expected_prev);
		$display ("     Real value = %b", char1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_char1_exp[7] = char1_expected_prev[7];
	end
	if (
		( char2_expected_prev[0] !== 1'bx ) && ( char2_prev[0] !== char2_expected_prev[0] )
		&& ((char2_expected_prev[0] !== last_char2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[0] = char2_expected_prev[0];
	end
	if (
		( char2_expected_prev[1] !== 1'bx ) && ( char2_prev[1] !== char2_expected_prev[1] )
		&& ((char2_expected_prev[1] !== last_char2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[1] = char2_expected_prev[1];
	end
	if (
		( char2_expected_prev[2] !== 1'bx ) && ( char2_prev[2] !== char2_expected_prev[2] )
		&& ((char2_expected_prev[2] !== last_char2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[2] = char2_expected_prev[2];
	end
	if (
		( char2_expected_prev[3] !== 1'bx ) && ( char2_prev[3] !== char2_expected_prev[3] )
		&& ((char2_expected_prev[3] !== last_char2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[3] = char2_expected_prev[3];
	end
	if (
		( char2_expected_prev[4] !== 1'bx ) && ( char2_prev[4] !== char2_expected_prev[4] )
		&& ((char2_expected_prev[4] !== last_char2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[4] = char2_expected_prev[4];
	end
	if (
		( char2_expected_prev[5] !== 1'bx ) && ( char2_prev[5] !== char2_expected_prev[5] )
		&& ((char2_expected_prev[5] !== last_char2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[5] = char2_expected_prev[5];
	end
	if (
		( char2_expected_prev[6] !== 1'bx ) && ( char2_prev[6] !== char2_expected_prev[6] )
		&& ((char2_expected_prev[6] !== last_char2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[6] = char2_expected_prev[6];
	end
	if (
		( char2_expected_prev[7] !== 1'bx ) && ( char2_prev[7] !== char2_expected_prev[7] )
		&& ((char2_expected_prev[7] !== last_char2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char2_expected_prev);
		$display ("     Real value = %b", char2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_char2_exp[7] = char2_expected_prev[7];
	end
	if (
		( char3_expected_prev[0] !== 1'bx ) && ( char3_prev[0] !== char3_expected_prev[0] )
		&& ((char3_expected_prev[0] !== last_char3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[0] = char3_expected_prev[0];
	end
	if (
		( char3_expected_prev[1] !== 1'bx ) && ( char3_prev[1] !== char3_expected_prev[1] )
		&& ((char3_expected_prev[1] !== last_char3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[1] = char3_expected_prev[1];
	end
	if (
		( char3_expected_prev[2] !== 1'bx ) && ( char3_prev[2] !== char3_expected_prev[2] )
		&& ((char3_expected_prev[2] !== last_char3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[2] = char3_expected_prev[2];
	end
	if (
		( char3_expected_prev[3] !== 1'bx ) && ( char3_prev[3] !== char3_expected_prev[3] )
		&& ((char3_expected_prev[3] !== last_char3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[3] = char3_expected_prev[3];
	end
	if (
		( char3_expected_prev[4] !== 1'bx ) && ( char3_prev[4] !== char3_expected_prev[4] )
		&& ((char3_expected_prev[4] !== last_char3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[4] = char3_expected_prev[4];
	end
	if (
		( char3_expected_prev[5] !== 1'bx ) && ( char3_prev[5] !== char3_expected_prev[5] )
		&& ((char3_expected_prev[5] !== last_char3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[5] = char3_expected_prev[5];
	end
	if (
		( char3_expected_prev[6] !== 1'bx ) && ( char3_prev[6] !== char3_expected_prev[6] )
		&& ((char3_expected_prev[6] !== last_char3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[6] = char3_expected_prev[6];
	end
	if (
		( char3_expected_prev[7] !== 1'bx ) && ( char3_prev[7] !== char3_expected_prev[7] )
		&& ((char3_expected_prev[7] !== last_char3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char3_expected_prev);
		$display ("     Real value = %b", char3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_char3_exp[7] = char3_expected_prev[7];
	end
	if (
		( char4_expected_prev[0] !== 1'bx ) && ( char4_prev[0] !== char4_expected_prev[0] )
		&& ((char4_expected_prev[0] !== last_char4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[0] = char4_expected_prev[0];
	end
	if (
		( char4_expected_prev[1] !== 1'bx ) && ( char4_prev[1] !== char4_expected_prev[1] )
		&& ((char4_expected_prev[1] !== last_char4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[1] = char4_expected_prev[1];
	end
	if (
		( char4_expected_prev[2] !== 1'bx ) && ( char4_prev[2] !== char4_expected_prev[2] )
		&& ((char4_expected_prev[2] !== last_char4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[2] = char4_expected_prev[2];
	end
	if (
		( char4_expected_prev[3] !== 1'bx ) && ( char4_prev[3] !== char4_expected_prev[3] )
		&& ((char4_expected_prev[3] !== last_char4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[3] = char4_expected_prev[3];
	end
	if (
		( char4_expected_prev[4] !== 1'bx ) && ( char4_prev[4] !== char4_expected_prev[4] )
		&& ((char4_expected_prev[4] !== last_char4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[4] = char4_expected_prev[4];
	end
	if (
		( char4_expected_prev[5] !== 1'bx ) && ( char4_prev[5] !== char4_expected_prev[5] )
		&& ((char4_expected_prev[5] !== last_char4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[5] = char4_expected_prev[5];
	end
	if (
		( char4_expected_prev[6] !== 1'bx ) && ( char4_prev[6] !== char4_expected_prev[6] )
		&& ((char4_expected_prev[6] !== last_char4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[6] = char4_expected_prev[6];
	end
	if (
		( char4_expected_prev[7] !== 1'bx ) && ( char4_prev[7] !== char4_expected_prev[7] )
		&& ((char4_expected_prev[7] !== last_char4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char4_expected_prev);
		$display ("     Real value = %b", char4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_char4_exp[7] = char4_expected_prev[7];
	end
	if (
		( char5_expected_prev[0] !== 1'bx ) && ( char5_prev[0] !== char5_expected_prev[0] )
		&& ((char5_expected_prev[0] !== last_char5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[0] = char5_expected_prev[0];
	end
	if (
		( char5_expected_prev[1] !== 1'bx ) && ( char5_prev[1] !== char5_expected_prev[1] )
		&& ((char5_expected_prev[1] !== last_char5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[1] = char5_expected_prev[1];
	end
	if (
		( char5_expected_prev[2] !== 1'bx ) && ( char5_prev[2] !== char5_expected_prev[2] )
		&& ((char5_expected_prev[2] !== last_char5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[2] = char5_expected_prev[2];
	end
	if (
		( char5_expected_prev[3] !== 1'bx ) && ( char5_prev[3] !== char5_expected_prev[3] )
		&& ((char5_expected_prev[3] !== last_char5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[3] = char5_expected_prev[3];
	end
	if (
		( char5_expected_prev[4] !== 1'bx ) && ( char5_prev[4] !== char5_expected_prev[4] )
		&& ((char5_expected_prev[4] !== last_char5_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[4] = char5_expected_prev[4];
	end
	if (
		( char5_expected_prev[5] !== 1'bx ) && ( char5_prev[5] !== char5_expected_prev[5] )
		&& ((char5_expected_prev[5] !== last_char5_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[5] = char5_expected_prev[5];
	end
	if (
		( char5_expected_prev[6] !== 1'bx ) && ( char5_prev[6] !== char5_expected_prev[6] )
		&& ((char5_expected_prev[6] !== last_char5_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[6] = char5_expected_prev[6];
	end
	if (
		( char5_expected_prev[7] !== 1'bx ) && ( char5_prev[7] !== char5_expected_prev[7] )
		&& ((char5_expected_prev[7] !== last_char5_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char5_expected_prev);
		$display ("     Real value = %b", char5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_char5_exp[7] = char5_expected_prev[7];
	end
	if (
		( char6_expected_prev[0] !== 1'bx ) && ( char6_prev[0] !== char6_expected_prev[0] )
		&& ((char6_expected_prev[0] !== last_char6_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[0] = char6_expected_prev[0];
	end
	if (
		( char6_expected_prev[1] !== 1'bx ) && ( char6_prev[1] !== char6_expected_prev[1] )
		&& ((char6_expected_prev[1] !== last_char6_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[1] = char6_expected_prev[1];
	end
	if (
		( char6_expected_prev[2] !== 1'bx ) && ( char6_prev[2] !== char6_expected_prev[2] )
		&& ((char6_expected_prev[2] !== last_char6_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[2] = char6_expected_prev[2];
	end
	if (
		( char6_expected_prev[3] !== 1'bx ) && ( char6_prev[3] !== char6_expected_prev[3] )
		&& ((char6_expected_prev[3] !== last_char6_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[3] = char6_expected_prev[3];
	end
	if (
		( char6_expected_prev[4] !== 1'bx ) && ( char6_prev[4] !== char6_expected_prev[4] )
		&& ((char6_expected_prev[4] !== last_char6_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[4] = char6_expected_prev[4];
	end
	if (
		( char6_expected_prev[5] !== 1'bx ) && ( char6_prev[5] !== char6_expected_prev[5] )
		&& ((char6_expected_prev[5] !== last_char6_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[5] = char6_expected_prev[5];
	end
	if (
		( char6_expected_prev[6] !== 1'bx ) && ( char6_prev[6] !== char6_expected_prev[6] )
		&& ((char6_expected_prev[6] !== last_char6_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[6] = char6_expected_prev[6];
	end
	if (
		( char6_expected_prev[7] !== 1'bx ) && ( char6_prev[7] !== char6_expected_prev[7] )
		&& ((char6_expected_prev[7] !== last_char6_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port char6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", char6_expected_prev);
		$display ("     Real value = %b", char6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_char6_exp[7] = char6_expected_prev[7];
	end
	if (
		( lcd_data_expected_prev[0] !== 1'bx ) && ( lcd_data_prev[0] !== lcd_data_expected_prev[0] )
		&& ((lcd_data_expected_prev[0] !== last_lcd_data_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[0] = lcd_data_expected_prev[0];
	end
	if (
		( lcd_data_expected_prev[1] !== 1'bx ) && ( lcd_data_prev[1] !== lcd_data_expected_prev[1] )
		&& ((lcd_data_expected_prev[1] !== last_lcd_data_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[1] = lcd_data_expected_prev[1];
	end
	if (
		( lcd_data_expected_prev[2] !== 1'bx ) && ( lcd_data_prev[2] !== lcd_data_expected_prev[2] )
		&& ((lcd_data_expected_prev[2] !== last_lcd_data_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[2] = lcd_data_expected_prev[2];
	end
	if (
		( lcd_data_expected_prev[3] !== 1'bx ) && ( lcd_data_prev[3] !== lcd_data_expected_prev[3] )
		&& ((lcd_data_expected_prev[3] !== last_lcd_data_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[3] = lcd_data_expected_prev[3];
	end
	if (
		( lcd_data_expected_prev[4] !== 1'bx ) && ( lcd_data_prev[4] !== lcd_data_expected_prev[4] )
		&& ((lcd_data_expected_prev[4] !== last_lcd_data_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[4] = lcd_data_expected_prev[4];
	end
	if (
		( lcd_data_expected_prev[5] !== 1'bx ) && ( lcd_data_prev[5] !== lcd_data_expected_prev[5] )
		&& ((lcd_data_expected_prev[5] !== last_lcd_data_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[5] = lcd_data_expected_prev[5];
	end
	if (
		( lcd_data_expected_prev[6] !== 1'bx ) && ( lcd_data_prev[6] !== lcd_data_expected_prev[6] )
		&& ((lcd_data_expected_prev[6] !== last_lcd_data_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[6] = lcd_data_expected_prev[6];
	end
	if (
		( lcd_data_expected_prev[7] !== 1'bx ) && ( lcd_data_prev[7] !== lcd_data_expected_prev[7] )
		&& ((lcd_data_expected_prev[7] !== last_lcd_data_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_data_expected_prev);
		$display ("     Real value = %b", lcd_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_lcd_data_exp[7] = lcd_data_expected_prev[7];
	end
	if (
		( lcd_en_expected_prev !== 1'bx ) && ( lcd_en_prev !== lcd_en_expected_prev )
		&& ((lcd_en_expected_prev !== last_lcd_en_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_en_expected_prev);
		$display ("     Real value = %b", lcd_en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_lcd_en_exp = lcd_en_expected_prev;
	end
	if (
		( lcd_rs_expected_prev !== 1'bx ) && ( lcd_rs_prev !== lcd_rs_expected_prev )
		&& ((lcd_rs_expected_prev !== last_lcd_rs_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_rs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_rs_expected_prev);
		$display ("     Real value = %b", lcd_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_lcd_rs_exp = lcd_rs_expected_prev;
	end
	if (
		( lcd_rw_expected_prev !== 1'bx ) && ( lcd_rw_prev !== lcd_rw_expected_prev )
		&& ((lcd_rw_expected_prev !== last_lcd_rw_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lcd_rw :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lcd_rw_expected_prev);
		$display ("     Real value = %b", lcd_rw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_lcd_rw_exp = lcd_rw_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_n;
// wires                                               
wire [7:0] char1;
wire [7:0] char2;
wire [7:0] char3;
wire [7:0] char4;
wire [7:0] char5;
wire [7:0] char6;
wire [7:0] lcd_data;
wire lcd_en;
wire lcd_rs;
wire lcd_rw;

wire sampler;                             

// assign statements (if any)                          
lcd i1 (
// port map - connection between master ports and signals/registers   
	.char1(char1),
	.char2(char2),
	.char3(char3),
	.char4(char4),
	.char5(char5),
	.char6(char6),
	.clk(clk),
	.lcd_data(lcd_data),
	.lcd_en(lcd_en),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw),
	.rst_n(rst_n)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 

lcd_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

lcd_vlg_check_tst tb_out(
	.char1(char1),
	.char2(char2),
	.char3(char3),
	.char4(char4),
	.char5(char5),
	.char6(char6),
	.lcd_data(lcd_data),
	.lcd_en(lcd_en),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw),
	.sampler_rx(sampler)
);
endmodule

